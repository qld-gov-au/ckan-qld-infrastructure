Description: Cloudfront Lambda At Edge for fronting an application.
Parameters:
  RootDomain:
    Description: Base domain to ensure alt domains are not allowed through
    Type: String
  Environment:
    Description: Stack environment eg DEV, TRAINING
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
Resources:
  #This lambda function reorders querystring alphabetically for improved caching and remove www from host name if set
  ## Remove after August 2023 onwards once not in use
  LambdaEdgeFunction48e660f:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: #see files/cloudfrontLambda.js for human readable code (remove comments when updating inline js
        ZipFile:  |
          'use strict';
          const querystring = require('querystring');
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const params = querystring.parse(request.querystring);
              const sortedParams = {};
              Object.keys(params).sort().forEach(key => {
                  sortedParams[key] = params[key];
              });
              request.querystring = querystring.stringify(sortedParams);
              if ((request.headers.host[0].value === 'data.qld.gov.au' || request.headers.host[0].value === 'publications.qld.gov.au' ) && request.method !== 'POST') {
                  let alternativeHostname = 'www.' + request.headers.host[0].value;
                  let redirect = {
                      status: '301',
                      statusDescription: `Redirecting to apex domain`,
                      headers: {
                          location: [{ key: 'Location', value: `https://${alternativeHostname}${request.uri}${request.querystring ? '?' + request.querystring : ''}` }],
                          "access-control-allow-origin": [{ key: "Access-Control-Allow-Origin", value: "*" }],
                          "access-control-allow-methods": [{ key: "Access-Control-Allow-Methods", value: "POST, PUT, GET, DELETE, OPTIONS" }],
                          "access-control-allow-headers": [{ key: "Access-Control-Allow-Headers", value: "X-CKAN-API-KEY, Authorization, Content-Type" }]
                      }
                  };
                  callback(null, redirect);
              } else if ((request.headers.host[0].value !== 'www.data.qld.gov.au' && request.headers.host[0].value !== 'www.publications.qld.gov.au' ) &&  request.headers.host[0].value.startsWith('www.') && request.method !== 'POST') {
                  let alternativeHostname = request.headers.host[0].value.substring(4);
                  let redirect = {
                      status: '301',
                      statusDescription: `Redirecting to apex domain`,
                      headers: {
                          location: [{ key: 'Location', value: `https://${alternativeHostname}${request.uri}${request.querystring ? '?' + request.querystring : ''}` }],
                          "access-control-allow-origin": [{ key: "Access-Control-Allow-Origin", value: "*" }],
                          "access-control-allow-methods": [{ key: "Access-Control-Allow-Methods", value: "POST, PUT, GET, DELETE, OPTIONS" }],
                          "access-control-allow-headers": [{ key: "Access-Control-Allow-Headers", value: "X-CKAN-API-KEY, Authorization, Content-Type" }]
                      }
                  };
                  callback(null, redirect);
              } else {
                  callback(null, request);
              }
          };
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Timeout: 5

  LambdaEdgeFunction48e660f2023:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: #see files/cloudfrontLambda.js for human readable code (remove comments when updating inline js
        ZipFile:
         !Sub |
          'use strict';
          const querystring = require('querystring');
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const params = querystring.parse(request.querystring);
              const sortedParams = {};
              Object.keys(params).sort().forEach(key => {
                  sortedParams[key] = params[key];
              });
              request.querystring = querystring.stringify(sortedParams);
              let queryStringOutput = request.querystring ? '?' + request.querystring : ''
              let wwwDomain = 'www.${RootDomain}'
              if (request.headers.host[0].value !== wwwDomain) {
                  let redirect = {
                      status: '301',
                      statusDescription: `Redirecting to www domain`,
                      headers: {
                          location: [{ key: 'Location', value: 'https://' + wwwDomain + request.uri + queryStringOutput }],
                          "access-control-allow-origin": [{ key: "Access-Control-Allow-Origin", value: "*" }],
                          "access-control-allow-methods": [{ key: "Access-Control-Allow-Methods", value: "POST, PUT, GET, DELETE, OPTIONS" }],
                          "access-control-allow-headers": [{ key: "Access-Control-Allow-Headers", value: "X-CKAN-API-KEY, Authorization, Content-Type" }]
                      }
                  };
                  callback(null, redirect);
              } else {
                  callback(null, request);
              }
          };
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 5

  # This function strips the name of an S3 bucket out of the URL,
  # before passing the request upstream. This is needed because
  # CloudFront can only add a prefix to the request, not remove one.
  # We want eg '/ckan-opendata-attachments-prod/resources/foo' to serve
  # the 'resources/foo' object from bucket 'ckan-opendata-attachments-prod'.
  LambdaEdgeOriginFunction9cd5bfa:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile:  |
          'use strict';
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const s3_pattern = new RegExp('^/ckan-[a-z]+-attachments-[a-z]+/')
              if (s3_pattern.test(request.uri)) {
                request.uri = request.uri.replace(s3_pattern, '/');
              }
              callback( null, request );
          };
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Timeout: 5

  #versions are hard coded, if you need two versions, leave the old one in, but be aware that cloudformation does not like having two versions which are the same so it might get cranky.
  #previous version as of 6/9/2019 (decom in august 2023 or when not in use)
  VersionedLambdaFunction48e660f3: #change name if changing lambda code and update cloudfront link
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaEdgeFunction48e660f

#  #versions are hard coded, if you need two versions, leave the old one in, but be aware that cloudformation does not like having two versions which are the same so it might get cranky.
#  #current version as of 6/9/2023
  VersionedLambdaFunction48e660f32023: #change name if changing lambda code and update cloudfront link
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaEdgeFunction48e660f2023

  LambdaOriginFunctionVersion9cd5bfa:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaEdgeOriginFunction9cd5bfa

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

Outputs:
  #previous version as of 6/9/2019 (#decomission after August 2023 or when not in use)
  VersionedLambdaFunction48e660f3:
    Value: !Ref VersionedLambdaFunction48e660f3
  #don't forget add the new version to output the value for cross region referencing. Note cfn import's don't work cross region so we can't lock it sadly

  #current version as of 6/9/2023
  VersionedLambdaFunction48e660f32023:
    Value: !Ref VersionedLambdaFunction48e660f32023
  #don't forget add the new version to output the value for cross region referencing. Note cfn import's don't work cross region so we can't lock it sadly

  LambdaEdgeOriginFunctionVersion9cd5bfa:
    Value: !Ref LambdaOriginFunctionVersion9cd5bfa
