Description: Cloudfront Lambda At Edge for fronting an application.
Parameters:
  Environment:
    Description: Stack environment eg DEV, TRAINING
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
Resources:
  #This lambda function reorders querystring alphabetically for improved caching and remove www from host name if set
  LambdaEdgeFunction48e660f:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: #see files/cloudfrontLambda.js for human readable code (remove comments when updating inline js
        ZipFile:  |
          'use strict';
          const querystring = require('querystring');
          exports.handler = (event, context, callback) => {
              const request = event.Records[0].cf.request;
              const params = querystring.parse(request.querystring);
              const sortedParams = {};
              Object.keys(params).sort().forEach(key => {
                  sortedParams[key] = params[key];
              });
              request.querystring = querystring.stringify(sortedParams);
              if ((request.headers.host[0].value === 'data.qld.gov.au' || request.headers.host[0].value === 'publications.qld.gov.au' ) && request.method !== 'POST') {
                  let alternativeHostname = 'www.' + request.headers.host[0].value;
                  let redirect = {
                      status: '301',
                      statusDescription: `Redirecting to apex domain`,
                      headers: {
                          location: [{ key: 'Location', value: `https://${alternativeHostname}${request.uri}${request.querystring ? '?' + request.querystring : ''}` }],
                          "access-control-allow-origin": [{ key: "Access-Control-Allow-Origin", value: "*" }],
                          "access-control-allow-methods": [{ key: "Access-Control-Allow-Methods", value: "POST, PUT, GET, DELETE, OPTIONS" }],
                          "access-control-allow-headers": [{ key: "Access-Control-Allow-Headers", value: "X-CKAN-API-KEY, Authorization, Content-Type" }]
                      }
                  };
                  callback(null, redirect);
              } else if ((request.headers.host[0].value !== 'www.data.qld.gov.au' && request.headers.host[0].value !== 'www.publications.qld.gov.au' ) &&  request.headers.host[0].value.startsWith('www.') && request.method !== 'POST') {
                  let alternativeHostname = request.headers.host[0].value.substring(4);
                  let redirect = {
                      status: '301',
                      statusDescription: `Redirecting to apex domain`,
                      headers: {
                          location: [{ key: 'Location', value: `https://${alternativeHostname}${request.uri}${request.querystring ? '?' + request.querystring : ''}` }],
                          "access-control-allow-origin": [{ key: "Access-Control-Allow-Origin", value: "*" }],
                          "access-control-allow-methods": [{ key: "Access-Control-Allow-Methods", value: "POST, PUT, GET, DELETE, OPTIONS" }],
                          "access-control-allow-headers": [{ key: "Access-Control-Allow-Headers", value: "X-CKAN-API-KEY, Authorization, Content-Type" }]
                      }
                  };
                  callback(null, redirect);
              } else {
                  callback(null, request);
              }
          };
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Timeout: 5

  #verisons are hard coded, if you need two versions, leave the old one in, but be aware that cloudformation does not like having two versions which are the same so it might get cranky.
  #current version as of 6/9/2019
  VersionedLambdaFunction48e660f3: #change name if changing lambda code and update cloudfront link
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaEdgeFunction48e660f

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

Outputs:
  #current version as of 6/9/2019
  VersionedLambdaFunction48e660f3:
    Value: !Ref VersionedLambdaFunction48e660f3
  #don't forget add the new version to output the value for cross region referencing. Note cfn import's don't work cross region so we can't lock it sadly
