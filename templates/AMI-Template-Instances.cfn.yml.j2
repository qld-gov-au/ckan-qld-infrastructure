---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates archetype instances for generating machine image templates.'

Parameters:
  ApplicationName:
    Description: Name of the application (eg OpenData)
    Type: String
  ApplicationId:
    Description: All-lowercase identifier for the application (eg 'opendata')
    Type: String
    ConstraintDescription: Must contain only lowercase/numeric/hyphen/underscore.
    AllowedPattern: '[-_a-z0-9]*'
  Environment:
    Description: The target production vs non-production environment.
    Type: String
    Default: DEV
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
  SolrEC2SecondaryDiskSize:
    Description: The size (in gigabytes) of the non-root disk to add to Solr instances.
    Type: Number
    Default: 100
  SolrSecurityGroup:
    Description: The security group to apply to Solr instances.
    Type: String
    Default: DatabaseSG
  SolrInstanceProfileName:
    Description: The IAM profile name to apply to Solr instances.
    Type: String
    Default: InstanceProfileName
  WebEC2SecondaryDiskSize:
    Description: The size (in gigabytes) of the non-root disk to add to web instances.
    Type: Number
    Default: 32
  WebSecurityGroup:
    Description: The security group to apply to web instances.
    Type: String
    Default: AppAsgSG
  WebInstanceProfileName:
    Description: The IAM profile name to apply to web instances.
    Type: String
    Default: WebInstanceProfileName
  BatchEC2SecondaryDiskSize:
    Description: The size (in gigabytes) of the non-root disk to add to batch instances.
    Type: Number
    Default: 32
  BatchSecurityGroup:
    Description: The security group to apply to batch instances.
    Type: String
    Default: AppAsgSG
  BatchInstanceProfileName:
    Description: The IAM profile name to apply to batch instances. Typically they have the same permissions as web instances.
    Type: String
    Default: WebInstanceProfileName
  AppSubnets:
    Description: The base name for the exported application layer subnet IDs, eg if the exports are 'PRODMyApplicationAppSubnetA' and 'PRODMyApplicationAppSubnetB', then this would be 'PRODMyApplicationAppSubnet'. Only needed for HA configurations.
    Type: String
    Default: none
  DefaultEC2Key:
    Description: Select an existing SSH key
    Type: AWS::EC2::KeyPair::KeyName

Resources:

{% for layer in ['Batch', 'Web', 'Solr'] %}

  {{ layer }}TemplateInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            VolumeSize: 100
            VolumeType: "gp2"
        - DeviceName: "/dev/sdi"
          Ebs:
            Encrypted: true
            DeleteOnTermination: true
            VolumeSize: !Ref {{ layer }}EC2SecondaryDiskSize
            VolumeType: "gp2"
      IamInstanceProfile:
        Fn::ImportValue:
          Fn::Join:
            - ""
            - - !Ref Environment
              - !Ref ApplicationName
              - !Ref {{ layer }}InstanceProfileName
      # Amazon Linux 2023: al2023-ami-2023.6.20250317.2-kernel-6.1-x86_64
      ImageId: "{{ base_ami }}"
      InstanceType: "t3a.small"
      KeyName: !Ref DefaultEC2Key
      NetworkInterfaces:
        - DeviceIndex: 0
          GroupSet:
            - Fn::ImportValue: !Sub "${Environment}CKANManagementSG"
            - Fn::ImportValue:
                Fn::Join:
                  - ""
                  - - !Ref Environment
                    - CKAN
                    - !Ref {{ layer }}SecurityGroup
          SubnetId:
            Fn::ImportValue: !Sub "${AppSubnets}A"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/sh
            if ! (grep '/mnt/local_data' /etc/fstab >/dev/null); then
              mkdir /mnt/local_data
              mkfs -t xfs /dev/sdi
              echo '/dev/sdi /mnt/local_data xfs defaults,nofail 0 2' >> /etc/fstab
              mount -a
            fi
            if ! (yum install chef); then
              for i in `seq 1 5`; do
                yum install -y libxcrypt-compat "https://packages.chef.io/files/stable/chef/18.4.12/el/7/chef-18.4.12-1.el7.x86_64.rpm" && break
                sleep 5
              done
            fi
            REGION="--region ${AWS::Region}"
            metadata_token=`curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 60" http://169.254.169.254/latest/api/token` && \
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $metadata_token" http://169.254.169.254/latest/meta-data/instance-id) && \
            aws ec2 create-tags $REGION --resources $INSTANCE_ID --tags "Key=Name,Value=${ApplicationName}_${Environment}-{{ layer }}-ami-template"
            FUNCTION_NAME=$(aws ssm get-parameter $REGION --name "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/setup_function_name" --query "Parameter.Value" --output text)
            if (aws --version |grep -o 'aws-cli/[2-9]'); then
              PAYLOAD_FORMAT="--cli-binary-format raw-in-base64-out"
            fi
            aws lambda invoke $REGION --function-name "$FUNCTION_NAME" $PAYLOAD_FORMAT --payload '{"EC2InstanceId": "'$INSTANCE_ID'", "phase": "deploy"}' /var/log/instance-setup.log.`date '+%s'`
      Tags:
        - Key: Layer
          Value: {{ layer|lower }}
{% endfor %}

Outputs:

{% for layer in ['Batch', 'Web', 'Solr'] %}
  {{ layer }}TemplateInstanceId:
    Value: !Ref {{ layer }}TemplateInstance
    Export:
      Name: !Sub "${Environment}${ApplicationName}{{ layer }}TemplateInstanceId"
{% endfor %}
