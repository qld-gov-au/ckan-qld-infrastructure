AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  WebSubnetA:
    Value: !Ref WebSubnetA
    Export:
       Name: !Sub "${Environment}${ApplicationName}WebSubnetA"
  WebSubnetB:
    Value: !Ref WebSubnetB
    Export:
       Name: !Sub "${Environment}${ApplicationName}WebSubnetB"
  WebSubnetC:
    Value: !Ref WebSubnetC
    Export:
       Name: !Sub "${Environment}${ApplicationName}WebSubnetC"
  AppSubnetA:
    Value: !Ref AppSubnetA
    Export:
       Name: !Sub "${Environment}${ApplicationName}AppSubnetA"
  AppSubnetB:
    Value: !Ref AppSubnetB
    Export:
       Name: !Sub "${Environment}${ApplicationName}AppSubnetB"
  AppSubnetC:
    Value: !Ref AppSubnetC
    Export:
       Name: !Sub "${Environment}${ApplicationName}AppSubnetC"
  DBSubnetA:
    Value: !Ref DataSubnetA
    Export:
       Name: !Sub "${Environment}${ApplicationName}DBSubnetA"
  DBSubnetB:
    Value: !Ref DataSubnetB
    Export:
       Name: !Sub "${Environment}${ApplicationName}DBSubnetB"
  DBSubnetC:
    Value: !Ref DataSubnetC
    Export:
       Name: !Sub "${Environment}${ApplicationName}DBSubnetC"
  VPCId:
    Value: !Ref VPC
    Export:
       Name: !Sub "${VPCNamePrefix}Vpc-${Environment}"
  VPCPeeringEnabled:
     Value: !Ref VPCPeeringEnabled
     Export:
       Name: !Sub "${ApplicationName}-${Environment}-VPCPeeringEnabled"
Conditions:
  IsVPCPeeringEnabled:
    Fn::Equals:
      - Ref: VPCPeeringEnabled
      - 'true'
  NatGateways:
    Fn::Equals:
      - Ref: NatGateways
      - 'true'
  2PlusAZs:
    Fn::Or:
    - Fn::Equals:
      - Ref: AZCount
      - '2'
    - Fn::Equals:
      - Ref: AZCount
      - '3'
    - Fn::Equals:
      - Ref: AZCount
      - '4'
    - Fn::Equals:
      - Ref: AZCount
      - '5'
  2PlusAZsNatGateways:
    Fn::And:
    - Condition: 2PlusAZs
    - Condition: NatGateways
  2PlusAZsIsVPCPeeringEnabled:
    Fn::And:
    - Condition: 2PlusAZs
    - Condition: IsVPCPeeringEnabled
  3PlusAZs:
    Fn::Or:
    - Fn::Equals:
      - Ref: AZCount
      - '3'
    - Fn::Equals:
      - Ref: AZCount
      - '4'
    - Fn::Equals:
      - Ref: AZCount
      - '5'
  3PlusAZsNatGateways:
    Fn::And:
      - Condition: 3PlusAZs
      - Condition: NatGateways
  3PlusAZsIsVPCPeeringEnabled:
    Fn::And:
      - Condition: 3PlusAZs
      - Condition: IsVPCPeeringEnabled
  4PlusAZs:
    Fn::Or:
    - Fn::Equals:
      - Ref: AZCount
      - '4'
    - Fn::Equals:
      - Ref: AZCount
      - '5'
  4PlusAZsNatGateways:
    Fn::And:
      - Condition: 4PlusAZs
      - Condition: NatGateways
  4PlusAZsIsVPCPeeringEnabled:
    Fn::And:
      - Condition: 4PlusAZs
      - Condition: IsVPCPeeringEnabled
  5PlusAZs:
    Fn::Equals:
    - Ref: AZCount
    - '5'
  5PlusAZsNatGateways:
    Fn::And:
      - Condition: 5PlusAZs
      - Condition: NatGateways
  5PlusAZsIsVPCPeeringEnabled:
    Fn::And:
      - Condition: 5PlusAZs
      - Condition: IsVPCPeeringEnabled
Description: VPC Network
Parameters:
  ApplicationName:
    Description: Name of the application (ie. GI or Services, etc)
    Type: String
  AZCount:
    Description: The number of Availability Zones that the VPC is to span.
    Type: String
  BambooAgentIp:
    Description: The local Bamboo agent ip
    Type: String
  BambooAgentIp2:
    Description: The local Bamboo agent ip
    Type: String
  Environment:
    Description: Platform environment (e.g. PROD, POC, DEV).
    Type: String
  NatGateways:
    Description: Whether to provision nat gateways for private outbound routes
    Type: String
  VPCNamePrefix:
    Description: Name of the VPC.
    Type: String
  VPCPrefix:
    AllowedPattern: '[0-9]+\..+'
    Description: VPC Network Prefix (first two octets ONLY).
    Type: String
  VPCPeeringEnabled:
    Description: VPC Enabled or not ('true', 'false').
    Type: String
  VPCPeeringCidr:
    Description: VPC Peering Network CIDR
    Type: String
  VPCPeeringID:
    Description: EC2 VPC Peering ID
    Type: String
Resources:
  AppNACL:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-App_Tier"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  AppSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.10.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: App-A"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  AppSubnetANACLAssociation:
    Properties:
      NetworkAclId:
        Ref: AppNACL
      SubnetId:
        Ref: AppSubnetA
    Type: AWS::EC2::SubnetNetworkAclAssociation
  AppSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: AppSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation
  AppSubnetB:
    Condition: 2PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.11.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: App-B"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  AppSubnetBNACLAssociation:
    Condition: 2PlusAZs
    Properties:
      NetworkAclId:
        Ref: AppNACL
      SubnetId:
        Ref: AppSubnetB
    Type: AWS::EC2::SubnetNetworkAclAssociation
  AppSubnetBRouteTableAssociation:
    Condition: 2PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableB
      SubnetId:
        Ref: AppSubnetB
    Type: AWS::EC2::SubnetRouteTableAssociation
  AppSubnetC:
    Condition: 3PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.12.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: App-C"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  AppSubnetCNACLAssociation:
    Condition: 3PlusAZs
    Properties:
      NetworkAclId:
        Ref: AppNACL
      SubnetId:
        Ref: AppSubnetC
    Type: AWS::EC2::SubnetNetworkAclAssociation
  AppSubnetCRouteTableAssociation:
    Condition: 3PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableC
      SubnetId:
        Ref: AppSubnetC
    Type: AWS::EC2::SubnetRouteTableAssociation
  AppSubnetD:
    Condition: 4PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 3
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.13.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: App-D"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  AppSubnetDNACLAssociation:
    Condition: 4PlusAZs
    Properties:
      NetworkAclId:
        Ref: AppNACL
      SubnetId:
        Ref: AppSubnetD
    Type: AWS::EC2::SubnetNetworkAclAssociation
  AppSubnetDRouteTableAssociation:
    Condition: 4PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableD
      SubnetId:
        Ref: AppSubnetD
    Type: AWS::EC2::SubnetRouteTableAssociation
  AppSubnetE:
    Condition: 5PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 4
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.14.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: App-E"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  AppSubnetENACLAssociation:
    Condition: 4PlusAZs
    Properties:
      NetworkAclId:
        Ref: AppNACL
      SubnetId:
        Ref: AppSubnetE
    Type: AWS::EC2::SubnetNetworkAclAssociation
  AppSubnetERouteTableAssociation:
    Condition: 5PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableE
      SubnetId:
        Ref: AppSubnetE
    Type: AWS::EC2::SubnetRouteTableAssociation
  AttachGateway:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  DataNACL:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-Data_Tier"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  DataSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.20.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Data-A"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  DataSubnetANACLAssociation:
    Properties:
      NetworkAclId:
        Ref: DataNACL
      SubnetId:
        Ref: DataSubnetA
    Type: AWS::EC2::SubnetNetworkAclAssociation
  DataSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: DataSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation
  DataSubnetB:
    Condition: 2PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.21.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Data-B"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  DataSubnetBNACLAssociation:
    Condition: 2PlusAZs
    Properties:
      NetworkAclId:
        Ref: DataNACL
      SubnetId:
        Ref: DataSubnetB
    Type: AWS::EC2::SubnetNetworkAclAssociation
  DataSubnetBRouteTableAssociation:
    Condition: 2PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableB
      SubnetId:
        Ref: DataSubnetB
    Type: AWS::EC2::SubnetRouteTableAssociation
  DataSubnetC:
    Condition: 3PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.22.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Data-C"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  DataSubnetCNACLAssociation:
    Condition: 3PlusAZs
    Properties:
      NetworkAclId:
        Ref: DataNACL
      SubnetId:
        Ref: DataSubnetC
    Type: AWS::EC2::SubnetNetworkAclAssociation
  DataSubnetCRouteTableAssociation:
    Condition: 3PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableC
      SubnetId:
        Ref: DataSubnetC
    Type: AWS::EC2::SubnetRouteTableAssociation
  DataSubnetD:
    Condition: 4PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 3
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.23.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Data-D"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  DataSubnetDNACLAssociation:
    Condition: 4PlusAZs
    Properties:
      NetworkAclId:
        Ref: DataNACL
      SubnetId:
        Ref: DataSubnetD
    Type: AWS::EC2::SubnetNetworkAclAssociation
  DataSubnetDRouteTableAssociation:
    Condition: 4PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableD
      SubnetId:
        Ref: DataSubnetD
    Type: AWS::EC2::SubnetRouteTableAssociation
  DataSubnetE:
    Condition: 5PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 4
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.24.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Data-E"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  DataSubnetENACLAssociation:
    Condition: 5PlusAZs
    Properties:
      NetworkAclId:
        Ref: DataNACL
      SubnetId:
        Ref: DataSubnetE
    Type: AWS::EC2::SubnetNetworkAclAssociation
  DataSubnetERouteTableAssociation:
    Condition: 5PlusAZs
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableE
      SubnetId:
        Ref: DataSubnetE
    Type: AWS::EC2::SubnetRouteTableAssociation
  InternetGateway:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-IGW"
    Type: AWS::EC2::InternetGateway
  NATGateway:
    Condition: NatGateways
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGatewayEIP
        - AllocationId
      SubnetId:
        Ref: WebSubnetA
      Tags:
        - Key: Name
          Value: !Sub "NATGateway-${AWS::StackName}-WebSubnetA"
    Type: AWS::EC2::NatGateway
  NATGatewayEIP:
    Condition: NatGateways
    DependsOn: VPC
    Properties:
      Domain: VPC
    Type: AWS::EC2::EIP
  NATGatewayB:
    Condition: 2PlusAZsNatGateways
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEipB
          - AllocationId
      SubnetId:
        Ref: WebSubnetB
      Tags:
        - Key: Name
          Value: !Sub "NATGateway-${AWS::StackName}-WebSubnetB"
    Type: AWS::EC2::NatGateway
  NATGatewayEipB:
    Condition: 2PlusAZsNatGateways
    DependsOn: VPC
    Properties:
      Domain: VPC
    Type: AWS::EC2::EIP
  NATGatewayC:
    Condition: 3PlusAZsNatGateways
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEipC
          - AllocationId
      SubnetId:
        Ref: WebSubnetC
      Tags:
        - Key: Name
          Value: !Sub "NATGateway-${AWS::StackName}-WebSubnetC"
    Type: AWS::EC2::NatGateway
  NATGatewayEipC:
    Condition: 3PlusAZsNatGateways
    DependsOn: VPC
    Properties:
      Domain: VPC
    Type: AWS::EC2::EIP
  NATGatewayD:
    Condition: 4PlusAZsNatGateways
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEipD
          - AllocationId
      SubnetId:
        Ref: WebSubnetD
      Tags:
        - Key: Name
          Value: !Sub "NATGateway-${AWS::StackName}-WebSubnetD"
    Type: AWS::EC2::NatGateway
  NATGatewayEipD:
    Condition: 4PlusAZsNatGateways
    DependsOn: VPC
    Properties:
      Domain: VPC
    Type: AWS::EC2::EIP
  NATGatewayE:
    Condition: 5PlusAZsNatGateways
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGatewayEipE
          - AllocationId
      SubnetId:
        Ref: WebSubnetE
      Tags:
        - Key: Name
          Value: !Sub "NATGateway-${AWS::StackName}-WebSubnetE"
    Type: AWS::EC2::NatGateway
  NATGatewayEipE:
    Condition: 5PlusAZsNatGateways
    DependsOn: VPC
    Properties:
      Domain: VPC
    Type: AWS::EC2::EIP
  PermitAnyFromData:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: AppNACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyFromMgmt:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: DataNACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyFromWeb:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: WebNACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataTcp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '99'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToDataTcpSsh:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToDataTcpSsh:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataTcp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToDataTcpRdp:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '104'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToDataTcpRdp:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataTcp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: AppNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '106'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataUdp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: AppNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '107'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataUdp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: AppNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '108'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataUdp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: AppNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '109'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataICMP:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: AppNACL
      Protocol: '1'
      RuleAction: allow
      RuleNumber: '110'
      Icmp:
        Code: -1
        Type: -1
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToDataICMPv6:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: AppNACL
      Protocol: '58'
      RuleAction: allow
      RuleNumber: '111'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtTcp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '99'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToMgmtTcpSsh:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToMgmtTcpSsh:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtTcp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToMgmtTcpRdp:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '104'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToMgmtTcpRdp:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtTcp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: DataNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '106'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtUdp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: DataNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '107'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtUdp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: DataNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '108'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtUdp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: DataNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '109'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtICMP:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: DataNACL
      Protocol: '1'
      RuleAction: allow
      RuleNumber: '110'
      Icmp:
        Code: -1
        Type: -1
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToMgmtICMPv6:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: DataNACL
      Protocol: '58'
      RuleAction: allow
      RuleNumber: '111'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebTcp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '99'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToWebTcpSsh:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToWebTcpSsh:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 22
        To: 22
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebTcp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
    Type: AWS::EC2::NetworkAclEntry
  PermitLocalToWebTcpRdp:
    Properties:
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '104'
    Type: AWS::EC2::NetworkAclEntry
  PermitPeeringToWebTcpRdp:
    Condition: IsVPCPeeringEnabled
    Properties:
      CidrBlock: !Ref VPCPeeringCidr
      PortRange:
        From: 3389
        To: 3389
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '105'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebTcp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: WebNACL
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '106'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebUdp1:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 21
      NetworkAclId:
        Ref: WebNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '107'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebUdp2:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 23
        To: 3388
      NetworkAclId:
        Ref: WebNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '108'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebUdp3:
    Properties:
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3390
        To: 65535
      NetworkAclId:
        Ref: WebNACL
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '109'
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebICMP:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: WebNACL
      Protocol: '1'
      RuleAction: allow
      RuleNumber: '110'
      Icmp:
        Code: -1
        Type: -1
    Type: AWS::EC2::NetworkAclEntry
  PermitAnyToWebICMPv6:
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId:
        Ref: WebNACL
      Protocol: '58'
      RuleAction: allow
      RuleNumber: '111'
    Type: AWS::EC2::NetworkAclEntry
  PrivateNATGatewayRoute:
    Condition: NatGateways
    DependsOn: NATGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateRouteTable
    Type: AWS::EC2::Route
  PrivateOpsRoute:
    Condition: IsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PrivateRouteTable
    Type: AWS::EC2::Route
  BambooAgentRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTable
    Type: AWS::EC2::Route
  BambooAgentRoute2:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp2
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTable
    Type: AWS::EC2::Route
  PrivateRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PrivateRoutes"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  ## private RouteTableB to E
  PrivateNATGatewayRouteB:
    Condition: 2PlusAZsNatGateways
    DependsOn: NATGatewayB
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayB
      RouteTableId:
        Ref: PrivateRouteTableB
    Type: AWS::EC2::Route
  PrivateOpsRouteB:
    Condition: 2PlusAZsIsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PrivateRouteTableB
    Type: AWS::EC2::Route
  BambooAgentRouteB:
    Condition: 2PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableB
    Type: AWS::EC2::Route
  BambooAgentRouteB2:
    Condition: 2PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp2
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableB
    Type: AWS::EC2::Route
  PrivateRouteTableB:
    Condition: 2PlusAZs
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PrivateRoutesB"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateNATGatewayRouteC:
    Condition: 3PlusAZsNatGateways
    DependsOn: PrivateRouteTableC
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayC
      RouteTableId:
        Ref: PrivateRouteTableC
    Type: AWS::EC2::Route
  PrivateOpsRouteC:
    Condition: 3PlusAZsIsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PrivateRouteTableC
    Type: AWS::EC2::Route
  BambooAgentRouteC:
    Condition: 3PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableC
    Type: AWS::EC2::Route
  BambooAgentRouteC2:
    Condition: 3PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp2
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableC
    Type: AWS::EC2::Route
  PrivateRouteTableC:
    Condition: 3PlusAZs
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PrivateRoutesC"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateNATGatewayRouteD:
    Condition: 4PlusAZsNatGateways
    DependsOn: NATGatewayD
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayD
      RouteTableId:
        Ref: PrivateRouteTableD
    Type: AWS::EC2::Route
  PrivateOpsRouteD:
    Condition: 4PlusAZsIsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PrivateRouteTableD
    Type: AWS::EC2::Route
  BambooAgentRouteD:
    Condition: 4PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableD
    Type: AWS::EC2::Route
  BambooAgentRouteD2:
    Condition: 4PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp2
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableD
    Type: AWS::EC2::Route
  PrivateRouteTableD:
    Condition: 4PlusAZs
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PrivateRoutesD"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateNATGatewayRouteE:
    Condition: 5PlusAZsNatGateways
    DependsOn: NATGatewayE
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayE
      RouteTableId:
        Ref: PrivateRouteTableE
    Type: AWS::EC2::Route
  PrivateOpsRouteE:
    Condition: 5PlusAZsIsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PrivateRouteTableE
    Type: AWS::EC2::Route
  BambooAgentRouteE:
    Condition: 5PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableE
    Type: AWS::EC2::Route
  BambooAgentRouteE2:
    Condition: 5PlusAZs
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: !Ref BambooAgentIp2
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableE
    Type: AWS::EC2::Route
  PrivateRouteTableE:
    Condition: 5PlusAZs
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PrivateRoutesE"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
### end private routetable
  PublicDefaultRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicOpsRoute:
    Condition: IsVPCPeeringEnabled
    Properties:
      DestinationCidrBlock: !Ref VPCPeeringCidr
      VpcPeeringConnectionId: !Ref VPCPeeringID
      RouteTableId: !Ref PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${VPCNamePrefix}Vpc-${Environment}-PublicRoutes"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  VPC:
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Sub "${VPCPrefix}.0.0/16"
      Tags:
      - Key: Name
        Value: !Sub "${VPCNamePrefix}-${Environment}"
    Type: AWS::EC2::VPC
  WebNACL:
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-Web_Tier"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  WebSubnetA:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.0.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Web-A"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  WebSubnetANACLAssociation:
    Properties:
      NetworkAclId:
        Ref: WebNACL
      SubnetId:
        Ref: WebSubnetA
    Type: AWS::EC2::SubnetNetworkAclAssociation
  WebSubnetARouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: WebSubnetA
    Type: AWS::EC2::SubnetRouteTableAssociation
  WebSubnetB:
    Condition: 2PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.1.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Web-B"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  WebSubnetBNACLAssociation:
    Condition: 2PlusAZs
    Properties:
      NetworkAclId:
        Ref: WebNACL
      SubnetId:
        Ref: WebSubnetB
    Type: AWS::EC2::SubnetNetworkAclAssociation
  WebSubnetBRouteTableAssociation:
    Condition: 2PlusAZs
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: WebSubnetB
    Type: AWS::EC2::SubnetRouteTableAssociation
  WebSubnetC:
    Condition: 3PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.2.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Web-C"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  WebSubnetCNACLAssociation:
    Condition: 3PlusAZs
    Properties:
      NetworkAclId:
        Ref: WebNACL
      SubnetId:
        Ref: WebSubnetC
    Type: AWS::EC2::SubnetNetworkAclAssociation
  WebSubnetCRouteTableAssociation:
    Condition: 3PlusAZs
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: WebSubnetC
    Type: AWS::EC2::SubnetRouteTableAssociation
  WebSubnetD:
    Condition: 4PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 3
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.3.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Web-D"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  WebSubnetDNACLAssociation:
    Condition: 4PlusAZs
    Properties:
      NetworkAclId:
        Ref: WebNACL
      SubnetId:
        Ref: WebSubnetD
    Type: AWS::EC2::SubnetNetworkAclAssociation
  WebSubnetDRouteTableAssociation:
    Condition: 4PlusAZs
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: WebSubnetD
    Type: AWS::EC2::SubnetRouteTableAssociation
  WebSubnetE:
    Condition: 5PlusAZs
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 4
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: !Sub "${VPCPrefix}.4.0/24"
      Tags:
      - Key: Name
        Value: !Sub "${Environment}: Web-E"
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  WebSubnetENACLAssociation:
    Condition: 5PlusAZs
    Properties:
      NetworkAclId:
        Ref: WebNACL
      SubnetId:
        Ref: WebSubnetE
    Type: AWS::EC2::SubnetNetworkAclAssociation
  WebSubnetERouteTableAssociation:
    Condition: 5PlusAZs
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: WebSubnetE
    Type: AWS::EC2::SubnetRouteTableAssociation
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument: {
        "Version":"2012-10-17",
        "Statement":[{
          "Effect":"Allow",
          "Principal": "*",
          "Action":["s3:*"],
          "Resource":["arn:aws:s3:::","arn:aws:s3:::*"]
        }]
      }
      RouteTableIds:
        - !Ref PrivateRouteTable
        - !Ref PublicRouteTable
      ServiceName: !Join ['', [com.amazonaws., !Ref 'AWS::Region', .s3]]
      VpcId: !Ref VPC
