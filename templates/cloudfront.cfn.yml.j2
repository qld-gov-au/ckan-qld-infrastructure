Description: Cloudfront Distribution for fronting an application.
Parameters:
  ACMCertificateARN:
    Description: ARN for certificate to be used by CloudFront
    Type: String
  Domain:
    Description: Domain pointing to EC2 load balancer
    Type: CommaDelimitedList
  OriginReadTimeout:
    Description: Wait response timeout, default 60
    Default: 60
    Type: Number
  WebOrigin:
    Description: Platform ELB
    Type: String
  CmsOrigin:
    Description: CMS cname
    Type: String
  Environment:
    Description: Platform environment
    Type: String
  Platform:
    Description: Name of the platform ie GI, Services, Static,etc
    Type: String
  LogBucketName:
    Description: Name of the S3 logging bucket.
    Type: String
  AttachmentBucketName:
    Description: Name of the S3 bucket for uploaded files.
    Type: String
  WebACLId:
    Description: WAF web ACL Id.
    Type: String
  Region:
    Description: The AWS region for non-global resources like S3 buckets.
    Type: String
  Service:
    Description: for Tagging Distribution
    Type: String
  Division:
    Description: for Tagging Distribution
    Type: String
  Owner:
    Description: for Tagging Distribution
    Type: String
  Version:
    Description: for Tagging Distribution
    Type: String
  LambdaAtEdgeViewerRequestVersion:
    Description: Lambda at Edge which is located in us-east-1
    Type: String
  LambdaAtEdgeOriginRequestVersion:
    Description: Lambda at Edge function for updating requests to the origin
    Type: String

Resources:

  #The new way to do caching with cloudfront, much better now you can re reference it
  CachePolicyCMS:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub "${Service} Cache policy"
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 0
        Name: !Sub "${AWS::StackName}_CachePolicyCMS"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "all" #none, whitelist, allExcept, all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: "whitelist" #none, whitelist
            Headers: #max 10
              - "Accept"
              - "Accept-Charset"
              - "Accept-Language"
              - "Authorization"
              - "Host"
              - "Origin"
              - "Referer"
              - "Access-Control-Request-Method"
              - "Access-Control-Request-Headers"
              - "Accept-Datetime"
          QueryStringsConfig:
            QueryStringBehavior: "all" #all, allExcept, none, whitelist

  CachePolicyCkan:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub "${Service} Cache policy"
        DefaultTTL: 60
        MaxTTL: 31536000
        MinTTL: 0
        Name: !Sub "${AWS::StackName}_CachePolicyCkan"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "all" #none, whitelist, allExcept, all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: "whitelist" #none, whitelist
            Headers: #max 10
              - "Accept"
              - "Accept-Charset"
              - "Accept-Language"
              - "Authorization"
              - "Host"
              - "Origin"
              - "Referer"
              - "Access-Control-Request-Method"
              - "Access-Control-Request-Headers"
              - "Accept-Datetime"
          QueryStringsConfig:
            QueryStringBehavior: "all" #all, allExcept, none, whitelist

  CachePolicyS3:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub "${Service} Cache policy"
        DefaultTTL: 3600
        MaxTTL: 3600
        MinTTL: 0
        Name: !Sub "${AWS::StackName}_CachePolicyS3"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "all" #none, whitelist, allExcept, all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: "none" #none, whitelist
          QueryStringsConfig:
            QueryStringBehavior: "all" #all, allExcept, none, whitelist
  CachePolicyCKANAPI:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: !Sub "${Service} API Cache policy"
        DefaultTTL: 60
        MaxTTL: 31536000
        MinTTL: 60
        Name: !Sub "${AWS::StackName}_CachePolicyAPI"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "none" #none, whitelist, allExcept, all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: "whitelist" #none, whitelist
            Headers: #max 10
              - "Authorization"
              - "Origin"
              - "Accept"
              - "Host"
          QueryStringsConfig:
            QueryStringBehavior: "all" #all, allExcept, none, whitelist
  DistributionConfig:
    DependsOn:
      - CachePolicyCkan
      - CachePolicyS3
      - CachePolicyCMS
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !Ref Domain
        CacheBehaviors:

{% if CmsOrigin == "" %}
{% for path in ['/assets/*', '/dataset/*/resource/*/download/*'] %}
          - PathPattern: "{{ path }}"
            TargetOriginId: 'WebOrigin'
            CachePolicyId: !Ref CachePolicyCMS
            OriginRequestPolicyId: "33f36d7e-f396-46d9-90e0-52428a34d9dc" #AllViewerAndCloudFrontHeaders-2022-06
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: 'viewer-request'
                LambdaFunctionARN: !Ref LambdaAtEdgeViewerRequestVersion
{% endfor %}
{% else %}
          #Everything that isn't the below rules for CMS resources should go to CKAN except _tracking
          - PathPattern: /_tracking # ckan tracking ping path
            TargetOriginId: 'WebOrigin'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: !Ref CachePolicyCkan
            OriginRequestPolicyId: "33f36d7e-f396-46d9-90e0-52428a34d9dc" #AllViewerAndCloudFrontHeaders-2022-06
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: 'viewer-request'
                LambdaFunctionARN: !Ref LambdaAtEdgeViewerRequestVersion

{% for path in ['/index.*', '/_*', '/', '/home*', '/article*', '/visualisations*', '/news-and-case-studies*', '/logout*', '/oauth-account-manager*'] %}
          - PathPattern: "{{ path }}"
            TargetOriginId: 'CmsOrigin'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: !Ref CachePolicyCMS
            OriginRequestPolicyId: "33f36d7e-f396-46d9-90e0-52428a34d9dc" #AllViewerAndCloudFrontHeaders-2022-06
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: 'viewer-request'
                LambdaFunctionARN: !Ref LambdaAtEdgeViewerRequestVersion
{% endfor %}
{% endif %}

          - PathPattern: !Sub "/${AttachmentBucketName}/*" # S3 uploaded files
            TargetOriginId: 'S3Origin'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: !Ref CachePolicyS3
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: 'origin-request'
                LambdaFunctionARN: !Ref LambdaAtEdgeOriginRequestVersion
{% for path in ['/api/3/action/datastore_sear*', '/api/action/datastore_searq*'] %}
          - PathPattern: "{{ path }}" # datastore read endpoints
            TargetOriginId: 'WebOrigin'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: !Ref CachePolicyCKANAPI
            OriginRequestPolicyId: "33f36d7e-f396-46d9-90e0-52428a34d9dc" #AllViewerAndCloudFrontHeaders-2022-06
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: 'viewer-request'
                LambdaFunctionARN: !Ref LambdaAtEdgeViewerRequestVersion
{% endfor %}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - POST
            - DELETE
            - OPTIONS
            - PUT
            - PATCH
          CachePolicyId: !Ref CachePolicyCkan
          OriginRequestPolicyId: "33f36d7e-f396-46d9-90e0-52428a34d9dc" #AllViewerAndCloudFrontHeaders-2022-06
          Compress: true
          TargetOriginId: 'WebOrigin'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref LambdaAtEdgeViewerRequestVersion

{% if CmsOrigin == "" %}
        DefaultRootObject: /
{% else %}
        DefaultRootObject: home
{% endif %}

        Enabled: true
        Logging:
          Bucket: !Sub "${LogBucketName}.s3.amazonaws.com"
          IncludeCookies: true
          Prefix: !Sub "cloudfront-logs/${Platform}/${Environment}/"

        Origins:
        - DomainName: !Ref WebOrigin
          Id: 'WebOrigin'
          CustomOriginConfig:
            OriginProtocolPolicy: "match-viewer"      # required, accepts http-only, match-viewer, https-only
            OriginReadTimeout: !Ref OriginReadTimeout

{% if CmsOrigin != "" %}
        - DomainName:
            !Ref CmsOrigin
          Id: 'CmsOrigin'
          CustomOriginConfig:
            OriginProtocolPolicy: "match-viewer"      # required, accepts http-only, match-viewer, https-only
            OriginReadTimeout: !Ref OriginReadTimeout
            OriginSSLProtocols:
              - "TLSv1.1"
              - "TLSv1.2"
{% endif %}

        - Id: 'S3Origin'
          DomainName: !Sub "${AttachmentBucketName}.s3.${Region}.amazonaws.com"
          S3OriginConfig:
            OriginAccessIdentity: ""
        PriceClass: PriceClass_All
        WebACLId: !Ref WebACLId
        HttpVersion: 'http2and3'
        IPV6Enabled: 'true'
        ViewerCertificate:
          AcmCertificateArn:
            Ref: ACMCertificateARN
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Comment:
          Fn::Sub:
            - "${Environment}-${Platform} ${Domain}"
            - Domain:
                Fn::Select:
                  - 0
                  - !Ref Domain
      Tags:
        - Key: "Environment"
          Value:  !Ref Environment
        - Key: "Service"
          Value: !Ref Service
        - Key: "Division"
          Value: !Ref Division
        - Key: "Owner"
          Value: !Ref Owner
        - Key: "Version"
          Value: !Ref Version

Outputs:
  CloudfrontAliasDNSName:
    Value:
      Fn::GetAtt:
      - DistributionConfig
      - DomainName
    Export:
      Name:
        Fn::Join:
          - ""
          - - !Ref Environment
            - !Ref Platform
            - "CloudfrontAliasDNSName"

  CloudfrontAliasHostedZoneID:
    Value: "Z2FDTNDATAQYW2" # All CloudFront distributions are in this zone, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
    Export:
      Name:
        Fn::Join:
          - ""
          - - !Ref Environment
            - !Ref Platform
            - "CloudfrontAliasHostedZoneID"

  AwsAccount:
    Value: !Ref "AWS::AccountId"
