AWSTemplateFormatVersion: 2010-09-09
Description: "Creates permissions and metadata for a CKAN stack."

Parameters:
  CookbookURL:
    Default: https://github.com/qld-gov-au/opswx-ckan-cookbook.git
    Description: "Repository URL. Must be SSH URL for private repos with private key."
    Type: String
  CookbookURLType:
    Description: Repository URL type eg git.
    Type: String
    Default: git
    AllowedValues:
      - git
      - s3
  #CookbookSSHKey:
    #Description: Change SSH key newlines to commas.
    #Type: CommaDelimitedList
    #NoEcho: true
  CookbookRevision:
    Default: master
    Description: Branch name in repository to checkout.
    Type: String
    MinLength: 1
    MaxLength: 64
  SolrSource:
    Description: URL for zip archive.
    Default: http://archive.apache.org/dist/lucene/solr/5.5.5/solr-5.5.5.zip
    Type: String
  CKANSource:
    Description: URL for Git repository or zip archive.
    Type: String
  CKANRevision:
    Description: Branch/tag name in repository to checkout.
    Type: String
  ApplicationName:
    Description: Name of the application (ie. GI or Services, etc)
    Type: String
  ApplicationId:
    Description: All-lowercase identifier for the application (eg 'gi', 'services', etc)
    Type: String
    ConstraintDescription: Must contain only lowercase/numeric/hyphen/underscore.
    AllowedPattern: '[-_a-z0-9]*'
  ApplicationTitle:
    Description: Publicly visible title for the application
    Type: String
  Environment:
    Description: Select a stack version.
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
  InternalStackZoneTLD:
    Description: Exported name of the private top-level domain name for the stack
    Type: String
  InternalStackZone:
    Description: Exported name of the Route53 hosted zone ID.
    Type: String
  EmailDomain:
    Description: Email Domain to be used
    Type: String
    MinLength: 6
    MaxLength: 254
  PublicTLD:
    Description: Route53 hosted TLD for public access (will be dropped soon)
    Type: String
    MinLength: 6
    MaxLength: 254
  PublicStackZoneTLD:
    Description: Route53 hosted TLD for public access
    Type: String
    MinLength: 6
    MaxLength: 254
  SiteDomain:
    Description: Used base for cookies on login this could be www.${rootdomain} or the same as rootdomain
    Type: String
    MinLength: 6
    MaxLength: 254
  RootDomain:
    Description: Used as suffix for loadbalancer name
    Type: String
    MinLength: 6
    MaxLength: 254
  EnableDataStore:
    Description: Whether or not to support the DataStore.
    Type: String
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"
  CacheAddress:
    Description: The exported name of the address for the Redis cache.
    Type: String
    Default: localhost
  CachePort:
    Description: The listen port for the Redis cache.
    Type: String
    Default: 6379
  DefaultEC2Key:
    Description: Select an existing SSH key
    Type: AWS::EC2::KeyPair::KeyName
  StackVPC:
    Description: The exported name of the existing VPC ID.
    Type: String
  WebSubnets:
    Type: String
    Description: The base name for the exported web layer subnet IDs, eg if the exports are 'PRODMyApplicationWebSubnetA' and 'PRODMyApplicationWebSubnetB', then this would be 'PRODMyApplicationWebSubnet'
  AdminSG:
    Description: The exported name of the security group ID containing sysadmin inbound rules
    Type: String
  LoadBalancerSG:
    Description: The exported name of the security group ID to attach to the application load balancer.
    Type: String
  CloudFrontSG:
    Description: The exported name of the security group ID for resources that should be accessed by CloudFront.
    Type: String
  DatabaseSG:
    Description: The exported name of the security group ID to attach to the database layer.
    Type: String
  ACMCertificateARN:
    Description: ARN for certificate to be used by the application load balancer.
    Type: String
  SSMKey:
    Type: String
    Description: KMS key for alias/aws/ssm
  GTMContainerId:
    Description: Google Tag Manager container ID
    Type: String
  AnalyticsId:
    Description: Google Analytics container ID
    Type: String
  LogBucketName:
    Description: Name of the S3 logging bucket.
    Type: String
  AttachmentsBucketName:
    Description: Name of the S3 Attachment bucket.
    Type: String
  PurlEndpoint:
    Description: Endpoint to contact for URL lookups.
    Type: String

Resources:
  AttachmentsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Provides access to s3 attachments bucket.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            - s3:ListBucket
            - s3:*Upload*
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:DeleteObject
            - s3:DeleteObjectTagging
            - s3:GetBucketAcl
            - s3:GetBucketCORS
            - s3:GetBucketPolicy
          Resource:
            - !Sub "arn:aws:s3:::${AttachmentsBucketName}"
            - !Sub "arn:aws:s3:::${AttachmentsBucketName}/*"
        - Effect: Allow
          Action:
            - s3:ListAllMyBuckets
          Resource:
            - !Sub "arn:aws:s3:::"

  RunCommandPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Privileges required to run SSM commands to set up instances.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:SendCommand
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:*:document/AWS-ApplyChefRecipes"
          - Effect: Allow
            Action:
              - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/*"
          - Effect: Allow
            Action:
              - ssm:SendCommand
            Resource:
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
            Condition:
              StringEquals:
                "ssm:resourceTag/Environment":
                  !Ref Environment
                "ssm:resourceTag/Service":
                  !Ref ApplicationName
          - Effect: Allow
            Action:
              - autoscaling:CompleteLifecycleAction
            Resource:
              - !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*"

  InstanceSetupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref RunCommandPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  {% set instance_setup_source = lookup('file', 'files/instanceSetupLambda.js') | replace('\n', '\n          ') %}

  InstanceSetupLambda{{ instance_setup_source_hash }}:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Description: Run Systems Manager commands to set up instances.
      FunctionName: !Sub "${ApplicationName}-${Environment}-setup-{{ instance_setup_source_hash }}"
      Runtime: nodejs20.x
      Code:
        ZipFile: >
          {{ instance_setup_source }}
      Handler: index.handler
      Role: !GetAtt InstanceSetupLambdaRole.Arn
      Timeout: 10

  InstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permissions needed by all instances
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # allow EC2 instances to tag their EBS root volumes for automatic backups
          - Effect: Allow
            Action: ec2:CreateTags
            Resource: "*"
          # allow email relay
          - Effect: Allow
            Action: ses:SendRawEmail
            Resource: "*"
          - Effect: Allow
            Action: ssm:DescribeParameters
            Resource: "*"
          - Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:GetParameter
              - ssm:GetParametersByPath
            Resource:
              - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/smtpRelay"
              - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/smtpRelay/*"
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Ref SSMKey
          # allow invoking the setup function on instance start
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource: !GetAtt InstanceSetupLambda{{ instance_setup_source_hash }}.Arn
          # allow sending logs to the shared S3 bucket
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetEncryptionConfiguration
              - s3:GetObject
              - s3:ListBucket
              - s3:ListMultipartUploadParts
              - s3:ListMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${LogBucketName}"
              - !Sub "arn:aws:s3:::${LogBucketName}/*"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ApplicationName}-${Environment}-CustomPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # allow the service layer to update internal DNS
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                Resource: !Sub
                  - "arn:aws:route53:::hostedzone/${Zone}"
                  - Zone:
                      Fn::ImportValue: !Ref InternalStackZone
              # allow the servers to retrieve a subset of SSM Parameter Store values
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/*"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/*"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/app/${ApplicationId}/solr_app/*"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/common/*"
      ManagedPolicyArns:
        - !Ref InstancePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess # for domain name lookups
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # to write CloudWatch logs
        - arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess # for domain name lookups

  InstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ApplicationName}-${Environment}-Web-CustomPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # allow the web layer to retrieve a subset of SSM Parameter Store values
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/app/${ApplicationId}/"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/app/${ApplicationId}/*"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/db/${ApplicationId}_*"
                  - !Sub "arn:aws:ssm:*:*:parameter/config/CKAN/${Environment}/common/*"
      ManagedPolicyArns:
        - !Ref InstancePolicy
        - !Ref AttachmentsPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudFrontReadOnlyAccess # for domain name lookups
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # to write CloudWatch logs
        - arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess # for domain name lookups

  WebInstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebInstanceRole

  # Populate SSM Parameter Store with all the information needed to deploy.
  # This should allow a blank instance to set itself up based only on the tags applied to it.

  InstanceSetupFunctionNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/setup_function_name"
      Type: String
      Value: !Ref "InstanceSetupLambda{{ instance_setup_source_hash }}"

  CookbookTypeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/type"
      Type: String
      Value: !Ref CookbookURLType

  CookbookUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/url"
      Type: String
      Value: !Ref CookbookURL

  CookbookRevisionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/revision"
      Type: String
      Value: !Ref CookbookRevision

  PublicTLDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/public_tld"
      Type: String
      Value: !Ref PublicTLD

  InternalHostedZoneTLDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/tld"
      Type: String
      Value:
        Fn::ImportValue: !Ref InternalStackZoneTLD

  TitleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/title"
      Type: String
      Value: !Sub "${ApplicationTitle} | Queensland Government"

  SiteDomainParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/site_domain"
      Type: String
      Value: !Ref SiteDomain

  EmailDomainParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/email_domain"
      Type: String
      Value: !Ref EmailDomain

  DataStoreEnableParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ds_enable"
      Type: String
      Value: !Ref EnableDataStore

  CKANAppNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/name"
      Type: String
      Value: !Sub "${ApplicationName}-${Environment}"

  CKANAppShortNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/shortname"
      Type: String
      Value: !Sub "${ApplicationId}-${Environment}"

  CKANAppSourceTypeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/app_source/type"
      Type: String
      Value: git

  CKANAppSourceURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/app_source/url"
      Type: String
      Value: !Ref CKANSource

  CKANAppSourceRevisionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/ckan_app/app_source/revision"
      Type: String
      Value: !Ref CKANRevision

  SolrAppNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/solr_app/name"
      Type: String
      Value: !Sub "${ApplicationName}-${Environment}-solr"

  SolrAppShortNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/solr_app/shortname"
      Type: String
      Value: !Sub "${ApplicationId}-${Environment}-solr"

  SolrAppSourceTypeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/solr_app/app_source/type"
      Type: String
      Value: archive

  SolrAppSourceURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/solr_app/app_source/url"
      Type: String
      Value: !Ref SolrSource

  PURLEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/purl_endpoint"
      Type: String
      Value: !Ref PurlEndpoint

  # Application Load Balancer structure is more complex than classic.
  # The LoadBalancer defines configuration values like logging config and security groups.
  # The Listener is external-facing, defining the port, certificate, etc,
  # and links the LoadBalancer to the TargetGroup.
  # The TargetGroup defines properties like health checks for a group of servers.
  # Autoscaling groups can then point at the TargetGroup to have their servers participate.

  CKANALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Environment}-${ApplicationName}-ALB"
      Type: application
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        # CloudFront covers our logging needs
        - Key: access_logs.s3.enabled
          Value: false
      SecurityGroups:
        - Fn::ImportValue: !Ref LoadBalancerSG
        - Fn::ImportValue: !Ref CloudFrontSG
      Subnets:
        - Fn::ImportValue: !Sub "${WebSubnets}A"
        - Fn::ImportValue: !Sub "${WebSubnets}B"
        - Fn::ImportValue: !Sub "${WebSubnets}C"
      Tags:
        - Key: Layer
          Value: web

  CKANALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertificateARN
      DefaultActions:
        - TargetGroupArn: !Ref CKANALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref CKANALB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06

  CKANALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-${ApplicationName}-ALB-target"
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/action/status_show
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 3600
      VpcId:
        Fn::ImportValue: !Ref StackVPC

  WebELBDNSName:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Sub "${ApplicationId}.${RootDomain}"
      HostedZoneName: !Sub "${PublicStackZoneTLD}."
      AliasTarget:
        HostedZoneId: !GetAtt CKANALB.CanonicalHostedZoneID
        DNSName: !GetAtt CKANALB.DNSName

  WebELBDNSNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/config/CKAN/${Environment}/app/${ApplicationId}/web_loadbalancer_dns_name"
      Type: String
      Value: !GetAtt CKANALB.DNSName

Outputs:
  WebELBDNSName:
    Value: !Ref WebELBDNSName
    Export:
      Name: !Sub "${Environment}${ApplicationName}WebElbDNSName"

  WebALBTargetGroup:
    Value: !Ref CKANALBTargetGroup
    Export:
      Name: !Sub "${Environment}${ApplicationName}WebAlbTargetGroup"

  InstanceProfileName:
    Value: !Ref InstanceRoleProfile
    Export:
      Name: !Sub "${Environment}${ApplicationName}InstanceProfileName"

  WebInstanceProfileName:
    Value: !Ref WebInstanceRoleProfile
    Export:
      Name: !Sub "${Environment}${ApplicationName}WebInstanceProfileName"

  InstanceProfile:
    Value: !GetAtt InstanceRoleProfile.Arn
    Export:
      Name: !Sub "${Environment}${ApplicationName}InstanceProfile"

  WebInstanceProfile:
    Value: !GetAtt WebInstanceRoleProfile.Arn
    Export:
      Name: !Sub "${Environment}${ApplicationName}WebInstanceProfile"
