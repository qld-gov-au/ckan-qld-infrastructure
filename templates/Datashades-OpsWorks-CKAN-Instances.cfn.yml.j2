---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates instances for OpsWorks CKAN NFS Stack.'

Parameters:
  ApplicationId:
    Description: All-lowercase identifier for the application (eg 'gi', 'services', etc)
    Type: String
    ConstraintDescription: Must contain only lowercase/numeric/hyphen/underscore.
    AllowedPattern: '[-_a-z0-9]*'
  Environment:
    Description: Select a stack version.
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
  ServicesEC2Size:
    Description: Select EC2 Instance Size for Solr
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  ServicesEC2Count:
    Description: The number of EC2 instances to create in the service layer, solr.
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 2
  WebEC2Size:
    Description: Select EC2 Instance Size.
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  BatchEC2Size:
    Description: Select EC2 Instance Size for background jobs.
    Type: String
    Default: t3.small
    AllowedValues:
      - none
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  BatchEC2Count:
    Description: The number of active EC2 instances to create in the batch layer, background jobs.
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 6
  EnableDataStore:
    Description: Whether or not to support the DataStore.
    Type: String
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"
  WebEC2Count:
    Description: The number of active EC2 instances to create in the web layer.
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 6
  OpsWorksStackID:
    Description: The exported name of the OpsWorks Stack ID.
    Type: String
  SolrLayerID:
    Description: The exported name of the OpsWorks Solr Layer ID.
    Type: String
  WebLayerID:
    Description: The exported name of the OpsWorks web Layer ID.
    Type: String
  BatchLayerID:
    Description: The exported name of the OpsWorks batch layer ID.
    Type: String
  AppSubnets:
    Description: The base name for the exported application layer subnet IDs, eg if the exports are 'PRODMyApplicationAppSubnetA' and 'PRODMyApplicationAppSubnetB', then this would be 'PRODMyApplicationAppSubnet'. Only needed for HA configurations.
    Type: String
    Default: none
  OperatingSystem:
    Description: The operating system to install on all instances.
    Type: String
    Default: "Amazon Linux 2"

Conditions:
  2PlusServiceInstances:
    !Equals [ !Ref ServicesEC2Count, 2 ]
  2PlusWebInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: WebEC2Count
      - '2'
    - !Condition 3PlusWebInstances
  3PlusWebInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: WebEC2Count
      - '3'
    - !Condition 4PlusWebInstances
  4PlusWebInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: WebEC2Count
      - '4'
    - !Condition 5PlusWebInstances
  5PlusWebInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: WebEC2Count
      - '5'
    - !Condition 6PlusWebInstances
  6PlusWebInstances:
    Fn::Equals:
    - Ref: WebEC2Count
    - '6'

  BatchLayerNeeded: #batch is background
    !Not [!Equals [!Ref BatchEC2Size, none]]
  1PlusBatchInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: BatchEC2Count
      - '1'
    - !Condition 2PlusBatchInstances
  2PlusBatchInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: BatchEC2Count
      - '2'
    - !Condition 3PlusBatchInstances
  3PlusBatchInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: BatchEC2Count
      - '3'
    - !Condition 4PlusBatchInstances
  4PlusBatchInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: BatchEC2Count
      - '4'
    - !Condition 5PlusBatchInstances
  5PlusBatchInstances:
    Fn::Or:
    - Fn::Equals:
      - Ref: BatchEC2Count
      - '5'
    - !Condition 6PlusBatchInstances
  6PlusBatchInstances:
    Fn::Equals:
    - Ref: BatchEC2Count
    - '6'

Resources:
  #solr 1
  OpswxEC2Services1:
    Type: AWS::OpsWorks::Instance
    Properties:
      Hostname: !Sub "${ApplicationId}-solr1{% if item.tags["PowerManaged"] == "Yes" %}-PM{% endif %}" #not touching as it will shutdown/restart prod on rename
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref ServicesEC2Size
      Os: !Ref OperatingSystem
      LayerIds:
        - Fn::ImportValue: !Ref SolrLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID
{% if item.tags["PowerManaged"] == "Yes" %}
      AutoScalingType: timer
      # Monday-Friday 06:00-20:00 GMT+10
      TimeBasedAutoScaling:
        Sunday:
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% for day in ["Monday","Tuesday","Wednesday","Thursday"] %}
        {{ day }}:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% endfor %}
        Friday:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% endif %}

  #solr 2
  OpswxEC2Services2:
    Condition: 2PlusServiceInstances
    Type: AWS::OpsWorks::Instance
    Properties:
      Hostname: !Sub "${ApplicationId}-solr2-{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}-Sub-B"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref ServicesEC2Size
      Os: !Ref OperatingSystem
      SubnetId:
        Fn::ImportValue: !Sub "${AppSubnets}B" #todo, can only change if hostname also is changed
      LayerIds:
        - Fn::ImportValue: !Ref SolrLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID
{% if item.tags["PowerManaged"] == "Yes" %}
      AutoScalingType: timer
      # Monday-Friday 06:00-20:00 GMT+10
      TimeBasedAutoScaling:
        Sunday:
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% for day in ["Monday","Tuesday","Wednesday","Thursday"] %}
        {{ day }}:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% endfor %}
        Friday:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% endif %}

  #web1 OpswxEC2Web1PM or OpswxEC2Web1AO
  OpswxEC2Web1{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}:
    Type: AWS::OpsWorks::Instance
    DependsOn:
      - OpswxEC2Services1
    Properties:
      Hostname: !Sub "${ApplicationId}-web1-{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}-Sub-A"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref WebEC2Size
      Os: !Ref OperatingSystem
      LayerIds:
        - Fn::ImportValue: !Ref WebLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID
{% if item.tags["PowerManaged"] == "Yes" %}
      AutoScalingType: timer
      # Monday-Friday 06:00-20:00 GMT+10
      TimeBasedAutoScaling:
        Sunday:
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% for day in ["Monday","Tuesday","Wednesday","Thursday"] %}
        {{ day }}:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% endfor %}
        Friday:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% endif %}

#OpswxEC2Web2PM ~ OpswxEC2Web6PM
#OpswxEC2Web2AO ~ OpswxEC2Web6AO
{% set subnetLetters = ["C","A","B"] %}
{% for loopingTimes in range(2, 7) %}
  OpswxEC2Web{{ loopingTimes }}{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}:
    Condition: {{ loopingTimes }}PlusWebInstances
    DependsOn:
      - OpswxEC2Services1
    Type: AWS::OpsWorks::Instance
    Properties:
      Hostname: !Sub "${ApplicationId}-web{{ loopingTimes }}-{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}-Sub-{{ subnetLetters[ loopingTimes % 3 ] }}"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref WebEC2Size
      Os: !Ref OperatingSystem
      SubnetId:
        Fn::ImportValue: !Sub "${AppSubnets}{{ subnetLetters[ loopingTimes % 3 ] }}"

      LayerIds:
        - Fn::ImportValue: !Ref WebLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID
{% if item.tags["PowerManaged"] == "Yes" %}
      AutoScalingType: timer
      # Monday-Friday 06:00-20:00 GMT+10
      TimeBasedAutoScaling:
        Sunday:
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% for day in ["Monday","Tuesday","Wednesday","Thursday"] %}
        {{ day }}:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% endfor %}
        Friday:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% endif %}

{% endfor %}


#legacy load servers
  OpswxEC2Web1Load:
    Type: AWS::OpsWorks::Instance
    DependsOn:
      - OpswxEC2Services1
    Properties:
      AutoScalingType: load
      Hostname: !Sub "${ApplicationId}-web1-load-Sub-A"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref WebEC2Size
      Os: !Ref OperatingSystem
      LayerIds:
        - Fn::ImportValue: !Ref WebLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID

  OpswxEC2Web2Load:
    Condition: 2PlusWebInstances
    Type: AWS::OpsWorks::Instance
    DependsOn:
      - OpswxEC2Web1Load
    Properties:
      AutoScalingType: load
      Hostname: !Sub "${ApplicationId}-web2-load-Sub-C"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref WebEC2Size
      Os: !Ref OperatingSystem
      SubnetId:
        Fn::ImportValue: !Sub "${AppSubnets}C"
      LayerIds:
        - Fn::ImportValue: !Ref WebLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID


  OpswxEC2Batch1Load:
    Condition: BatchLayerNeeded
    DependsOn:
      - OpswxEC2Services1
    Type: AWS::OpsWorks::Instance
    Properties:
      AutoScalingType: load
      Hostname: !Sub "${ApplicationId}-batch1-load-Sub-A"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref BatchEC2Size
      Os: !Ref OperatingSystem
      LayerIds:
        - Fn::ImportValue: !Ref BatchLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID

#OpswxEC2Batch1PM ~ OpswxEC2Batch6PM
#OpswxEC2Batch1AO ~ OpswxEC2Batch6AO
{% for loopingTimes in range(1, 7) %}
  OpswxEC2Batch{{ loopingTimes }}{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}:
    Condition: {{ loopingTimes }}PlusBatchInstances
    DependsOn:
      - OpswxEC2Services1
    Type: AWS::OpsWorks::Instance
    Properties:
      Hostname: !Sub "${ApplicationId}-batch{{ loopingTimes }}-{% if item.tags["PowerManaged"] == "Yes" %}PM{% else %}AO{% endif %}-Sub-{{ subnetLetters[ loopingTimes % 3 ] }}"
      RootDeviceType: ebs
      InstallUpdatesOnBoot: true
      InstanceType: !Ref BatchEC2Size
      Os: !Ref OperatingSystem
      LayerIds:
        - Fn::ImportValue: !Ref BatchLayerID
      StackId:
        Fn::ImportValue: !Ref OpsWorksStackID
      SubnetId:
        Fn::ImportValue: !Sub "${AppSubnets}{{ subnetLetters[ loopingTimes % 3 ] }}"
{% if item.tags["PowerManaged"] == "Yes" %}
      AutoScalingType: timer
      # Monday-Friday 06:00-20:00 GMT+10
      TimeBasedAutoScaling:
        Sunday:
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% for day in ["Monday","Tuesday","Wednesday","Thursday"] %}
        {{ day }}:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% for hour in range(20, 24) %}
          "{{ hour }}": "on"
{% endfor %}
{% endfor %}
        Friday:
{% for hour in range(0, 10) %}
          "{{ hour }}": "on"
{% endfor %}
{% endif %}

{% endfor %}
