---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates instances for OpsWorks CKAN NFS Stack.'

Parameters:
  ApplicationName:
    Description: Name of the application (eg OpenData)
    Type: String
  ApplicationId:
    Description: All-lowercase identifier for the application (eg 'opendata')
    Type: String
    ConstraintDescription: Must contain only lowercase/numeric/hyphen/underscore.
    AllowedPattern: '[-_a-z0-9]*'
  Environment:
    Description: Select a stack version.
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
  SolrEC2Size:
    Description: Select EC2 Instance Size for Solr
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  SolrEC2Count:
    Description: The number of EC2 instances to create in the service layer, solr.
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 2
  WebEC2Size:
    Description: Select EC2 Instance Size.
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  BatchEC2Size:
    Description: Select EC2 Instance Size for background jobs.
    Type: String
    Default: t3.small
    AllowedValues:
      - none
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m4.10xlarge
      - m5.12xlarge
  BatchEC2Count:
    Description: The number of active EC2 instances to create in the batch layer, background jobs.
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 6
  EnableDataStore:
    Description: Whether or not to support the DataStore.
    Type: String
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"
  WebEC2Count:
    Description: The number of active EC2 instances to create in the web layer.
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 6
  AppSubnets:
    Description: The base name for the exported application layer subnet IDs, eg if the exports are 'PRODMyApplicationAppSubnetA' and 'PRODMyApplicationAppSubnetB', then this would be 'PRODMyApplicationAppSubnet'. Only needed for HA configurations.
    Type: String
    Default: none
  BatchImageId:
    Description: The Amazon Machine Image ID to use for launching batch instances. Defaults to Amazon Linux 2.
    Type: String
    Default: "ami-0d71fe73adf7a9887"
  WebImageId:
    Description: The Amazon Machine Image ID to use for launching web instances. Defaults to Amazon Linux 2.
    Type: String
    Default: "ami-0d71fe73adf7a9887"
  SolrImageId:
    Description: The Amazon Machine Image ID to use for launching Solr instances. Defaults to Amazon Linux 2.
    Type: String
    Default: "ami-0d71fe73adf7a9887"
  DefaultEC2Key:
    Description: Select an existing SSH key
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  # Autoscaling instances

{% for layer in ['Batch', 'Web', 'Solr'] %}
  {{ layer }}LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-${ApplicationName}-{{ layer|lower }}-LaunchTemplate"
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 100
              VolumeType: "gp2"
          - DeviceName: "/dev/sdi"
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 32
              VolumeType: "gp2"
        IamInstanceProfile:
          Arn:
            Fn::ImportValue: !Sub "${Environment}${ApplicationName}{% if layer != 'Solr' %}Web{% endif %}InstanceProfile"
        ImageId: !Ref {{ layer }}ImageId
        InstanceType: !Ref {{ layer }}EC2Size
        KeyName: !Ref DefaultEC2Key
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${Environment}CKANManagementSG"
          - Fn::ImportValue: !Sub "${Environment}CKAN{% if layer == 'Solr' %}Database{% else %}AppAsg{% endif %}SG"
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/sh
              if ! (grep '/mnt/local_data' /etc/fstab >/dev/null); then
                mkdir /mnt/local_data
                mkfs -t xfs /dev/sdi
                echo '/dev/sdi /mnt/local_data xfs defaults,nofail 0 2' >> /etc/fstab
                mount -a
              fi
              metadata_token=`curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 60" http://169.254.169.254/latest/api/token` && \
              INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $metadata_token" http://169.254.169.254/latest/meta-data/instance-id) && \
              aws ec2 create-tags --region "${AWS::Region}" --resources $INSTANCE_ID --tags "Key=Name,Value=${ApplicationName}_${Environment}-{{ layer }}-$INSTANCE_ID"
              FUNCTION_NAME=$(aws ssm get-parameter --region "${AWS::Region}" --name "/config/CKAN/${Environment}/app/${ApplicationId}/cookbook/setup_function_name" --query "Parameter.Value" --output text)
              aws lambda invoke --region "${AWS::Region}" --function-name "$FUNCTION_NAME" --payload '{"EC2InstanceId": "'$INSTANCE_ID'", "phase": "setup"}' /var/log/instance-setup.log.`date '+%s'`

{% if layer == 'Web' %}
{% set minInstanceCount = (item.template_parameters['WebEC2Count'] | int) - 1 %}
{% else %}
{% set minInstanceCount = 1 %}
{% endif %}

  {{ layer }}ScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${Environment}-${ApplicationName}-{{ layer }}-ASG"
      DesiredCapacity: !Ref {{ layer }}EC2Count
      MinSize: {{ minInstanceCount }}
      MaxSize: 6
      LaunchTemplate:
        LaunchTemplateId: !Ref {{ layer }}LaunchTemplate
        Version: !GetAtt {{ layer }}LaunchTemplate.LatestVersionNumber
{% if layer == 'Solr' %}
      DefaultInstanceWarmup: 600
      HealthCheckGracePeriod: 600
{% else %}
      DefaultInstanceWarmup: 1200
      HealthCheckGracePeriod: 1200
{% endif %}
{% if layer == 'Web' %}
      TargetGroupARNs:
        - Fn::ImportValue: !Sub "${Environment}${ApplicationName}{{ layer }}AlbTargetGroup"
      HealthCheckType: ELB
{% endif %}
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${AppSubnets}A"
        - Fn::ImportValue: !Sub "${AppSubnets}B"
        - Fn::ImportValue: !Sub "${AppSubnets}C"
      Tags:
        - Key: Layer
          Value: {{ layer|lower }}
          PropagateAtLaunch: true

{% if item.tags["PowerManaged"] == "Yes" %}
  {{ layer }}ScalingIn:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref {{ layer }}ScalingGroup
      DesiredCapacity: 0
      MinSize: '0'
      MaxSize: '0'
      Recurrence: "0 10 * * *"

  {{ layer }}ScalingOut:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref {{ layer }}ScalingGroup
      DesiredCapacity: !Ref {{ layer }}EC2Count
      MinSize: {{ minInstanceCount }}
      MaxSize: 6
      Recurrence: "0 20 * * *"
{% endif %}

{% endfor %}
