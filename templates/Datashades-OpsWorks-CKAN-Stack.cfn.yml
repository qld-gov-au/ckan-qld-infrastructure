AWSTemplateFormatVersion: 2010-09-09
Description: "Creates an OpsWorks CKAN Stack."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: OpsWorks Custom Cookbook
        Parameters:
          - CookbookURL
          #- CookbookSSHKey
          - CookbookRevision

      -
        Label:
          default: OpsWorks Stack Details
        Parameters:
          - CreateServiceRole
          - ApplicationName
          - ApplicationId
          - Environment
          - StackTLD
          - CreateTLD
          - CacheAddress
          - CachePort
          - CreateELB
          - CreateInstances
          - CreateExtensions
          - ExtensionsTemplate
          - DefaultEC2Key
          - AdminUserGroup
          - AdminPubKeyBucket
          - StackVPC
          - WebSubnets
          - AppSubnets
          - DbSubnets
          - AdminSG
          - AppLBSG
          - AppSG
          - DatabaseSG

      -
        Label:
          default: CKAN Options
        Parameters:
          - PGDBUser
          - PGDBPassword
          - CKANAdminPW
          - CKANAdminEmail

      -
        Label:
          default: Application Sources
        Parameters:
          - SolrSource
          - CKANSource

    ParameterLabels:
      CookbookURL:
        default: What is the URL for the OpsWorks Custom Cookbook repository?
      SolrSource:
        default: Provide the URL for Apache Solr source archive.
      CKANSource:
        default: Provide the URL for CKAN source archive.
      #CookbookSSHKey:
        #default: Paste the private key for the Cookbook repository.
      CookbookRevision:
        default: What repository branch should the Custom Cookbook use?
      ApplicationName:
        default: Name of the application (ie. GI or Services, etc)
      ApplicationId:
        default: All-lowercase identifier for the application (eg 'gi', 'services', etc)
      Environment:
        default: What version is this OpsWorks stack?
      CreateTLD:
        default: Do you need the Route53 Hosted Zone for the TLD created?
      CreateServiceRole:
        default: Do you need an OpsWorks Service Role created?
      CreateInstances:
        default: Do you want to instances provisioned with this stack?
      CreateExtensions:
        default: Do you want to provision CKAN extensions with this stack?
      ExtensionsTemplate:
        default: Where is the CloudFormation Template for your CKAN Extensions?
      CreateELB:
        default: Do you want to provision an Elastic Load Balancer with this stack?
      StackTLD:
        default: What TLD hosted on Route53 is this stack using for internal DNS?
      CacheAddress:
        default: What is the address of the Redis cache?
      CachePort:
        default: What is the listening port of the Redis cache?
      DefaultEC2Key:
        default: What EC2 key pair should all instances in the OpsWorks stack use for SSH access?
      AdminUserGroup:
        default: What group should Bastion Host Admins belong to?
      AdminPubKeyBucket:
        default: Where is the S3 bucket for Bastion Host Admin's public keys?
      StackVPC:
        default: What VPC should OpsWorks stack instances belong to?
      WebSubnets:
        default: What base name are the web layer subnet IDs exported under?
      AppSubnets:
        default: What base name are the application layer subnet IDs exported under?
      DbSubnets:
        default: What base name are the data layer subnet IDs exported under?
      AdminSG:
        default: Which Security Group in the selected VPC contains SysAdmin user inbound rules?
      AppLBSG:
        default: Which Security Group in the selected VPC should be attached to the application load balancer?
      AppSG:
        default: Which Security Group in the selected VPC should be attached to the application layer?
      DatabaseSG:
        default: Which Security Group in the selected VPC should be attached to the database layer?
      PGDBUser:
        default: Account name for (non-superuser) Postgres DB access.
      PGDBPassword:
        default: Enter a password for Postgres DB access.
      CKANAdminPW:
        default: Enter a password for your CKAN Admin user.
      CKANAdminEmail:
        default: Enter the email address for your CKAN Admin user.

Parameters:
  CookbookURL:
    Default: https://github.com/qld-gov-au/opswx-ckan-cookbook.git
    Description: "Repository URL. Must be SSH URL for private repos with private key."
    Type: String
  #CookbookSSHKey:
    #Description: Change SSH key newlines to commas.
    #Type: CommaDelimitedList
    #NoEcho: true
  CookbookRevision:
    Default: QOL-4415_CKAN-2-7-3
    Description: Branch name in repository to checkout.
    Type: String
    MinLength: 1
    MaxLength: 64
  SolrSource:
    Description: URL for zip archive.
    Default: http://apache.mirror.digitalpacific.com.au/lucene/solr/5.5.5/solr-5.5.5.zip
    Type: String
  CKANSource:
    Description: URL for zip archive.
    Default: https://github.com/ckan/ckan/archive/ckan-2.7.3.zip
    Type: String
  ApplicationName:
    Description: Name of the application (ie. GI or Services, etc)
    Type: String
  ApplicationId:
    Description: All-lowercase identifier for the application (eg 'gi', 'services', etc)
    Type: String
    ConstraintDescription: Must contain only lowercase/numeric/hyphen/underscore.
    AllowedPattern: '[-_a-z0-9]*'
  Environment:
    Description: Select a stack version.
    Type: String
    Default: STAGING
    AllowedValues:
      - DEV
      - TRAINING
      - STAGING
      - PROD
  StackTLD:
    Description: Route53 hosted TLD for stack
    Type: String
    MinLength: 6
    MaxLength: 254
  CreateTLD:
    Type: String
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"
  CreateServiceRole:
    Description: Required if OpsWorks stacks have never been created in this account.
    Type: String
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"
  CreateInstances:
    Description: Recommended
    Type: String
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"
  CreateExtensions:
    Description: Optional.
    Type: String
    Default: "no"
    AllowedValues:
      - "yes"
      - "no"
  ExtensionsTemplate:
    Description: Valid S3 Bucket Location
    Type: String
    Default: https://s3-ap-southeast-2.amazonaws.com/link-opsworks/Datashades-OpsWorks-CKAN-Extensions.json
  CreateELB:
    Description: Recommended
    Type: String
    Default: "yes"
    AllowedValues:
      - "yes"
      - "no"
  CacheAddress:
    Description: The exported name of the address for the Redis cache.
    Type: String
    Default: localhost
  CachePort:
    Description: The listen port for the Redis cache.
    Type: String
    Default: 6379
  DefaultEC2Key:
    Description: Select an existing SSH key
    Type: AWS::EC2::KeyPair::KeyName
  AdminUserGroup:
    Description: Valid Linux group name
    Type: String
    Default: link
  CKANAdminPW:
    NoEcho: true
    Description: Password must be at least 8 characters up to a maximum of 64 characters in length.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: "[-a-zA-Z0-9_!@#$%^&*()|]*"
    ConstraintDescription: Must be 8 - 64 characters.
  CKANAdminEmail:
    Description: Valid Email Address
    Type: String
  AdminPubKeyBucket:
    Description: S3 Bucket URL
    Type: String
    Default: s3://link-opsworks/keys/
  StackVPC:
    Description: The exported name of the existing VPC ID.
    Type: String
  WebSubnets:
    Type: String
    Description: The base name for the exported web layer subnet IDs, eg if the exports are 'PRODMyApplicationWebSubnetA' and 'PRODMyApplicationWebSubnetB', then this would be 'PRODMyApplicationWebSubnet'
  AppSubnets:
    Type: String
    Description: The base name for the exported application layer subnet IDs, eg if the exports are 'PRODMyApplicationAppSubnetA' and 'PRODMyApplicationAppSubnetB', then this would be 'PRODMyApplicationAppSubnet'
  DbSubnets:
    Type: String
    Description: The base name for the exported data layer subnet IDs, eg if the exports are 'PRODMyApplicationDbSubnetA' and 'PRODMyApplicationDbSubnetB', then this would be 'PRODMyApplicationDbSubnet'
  AdminSG:
    Description: The exported name of the security group ID containing sysadmin inbound rules
    Type: String
  AppLBSG:
    Description: The exported name of the security group ID to attach to the application load balancer.
    Type: String
  AppSG:
    Description: The exported name of the security group ID to attach to applications.
    Type: String
  DatabaseSG:
    Description: The exported name of the security group ID to attach to the database layer.
    Type: String
  PGDBUser:
    Description: Account name for (non-superuser) Postgres DB access.
    Type: String
  PGDBPassword:
    NoEcho: true
    Description: Password must be at least 8 alphanumeric characters up to a maximum of 64 characters in length.
    Type: String
    MinLength: 8
    MaxLength: 64
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must be 8 - 64 alphanumeric characters.

Conditions:
  CreateHostedZone:
    Fn::Equals:
      - "yes"
      - !Ref CreateTLD
  ProvisionServiceRole:
    Fn::Equals:
      - "yes"
      - !Ref CreateServiceRole
  ProvisionExtensions:
    Fn::Equals:
      - "yes"
      - !Ref CreateExtensions
  ProvisionELB:
    Fn::And:
      - Fn::Equals:
          - "yes"
          - !Ref CreateELB
      - Fn::Equals:
          - "yes"
          - !Ref CreateInstances
  UseMultiAZ:
    Fn::Equals:
      - PROD
      - !Ref Environment

Resources:
  OpsWorksServiceRole:
    Condition: ProvisionServiceRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: opsworks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: "aws-opsworks-service-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Action:
                  - "ec2:*"
                  - iam:PassRole
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                  - "ecs:*"
                  - "elasticloadbalancing:*"
                  - "rds:*"
                Effect: Allow
                Resource: "*"

  EmailSendingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows the principal to send mail via Amazon SES.
      ManagedPolicyName: SendSESMail
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ses:SendRawEmail
            Resource: "*"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - !Ref EmailSendingPolicy

  InstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  OpsWorksStack:
    Type: AWS::OpsWorks::Stack
    Properties:
      AgentVersion: LATEST
      ConfigurationManager:
        Name: Chef
        Version: 12
      CustomCookbooksSource:
        Revision: !Ref CookbookRevision
        Type: git
        # SshKey: !Sub "${CookbookSSHKey}\n"
        Url: !Ref CookbookURL
      CustomJson:
        datashades:
          ckan_web:
            adminpw: !Ref CKANAdminPW
            adminemail: !Ref CKANAdminEmail
            dbuser: !Ref PGDBUser
            dbname: !Ref ApplicationName
            dsuser: !Sub "${PGDBUser}_datastore"
            dsname: !Sub "${ApplicationName}_datastore"
            endpoint: /
          jumpbox:
            bucket: !Ref AdminPubKeyBucket
            usergroup: !Ref AdminUserGroup
          postgres:
            password: !Ref PGDBPassword
          redis:
            hostname:
              Fn::ImportValue: !Ref CacheAddress
            port: !Ref CachePort
          tld: !Ref StackTLD
          version: !Ref Environment
          app_id: !Ref ApplicationId
      DefaultInstanceProfileArn:
        Fn::GetAtt:
          - InstanceRoleProfile
          - Arn
      DefaultOs: "Amazon Linux 2018.03"
      DefaultSshKeyName: !Ref DefaultEC2Key
      DefaultSubnetId:
        Fn::ImportValue:
          !Sub "${AppSubnets}A"
      Name: !Sub "${ApplicationName}_${Environment}"
      ServiceRoleArn:
        Fn::If:
          - ProvisionServiceRole
          - Fn::GetAtt:
            - OpsWorksServiceRole
            - Arn
          - Fn::Join:
            - ""
            - - "arn:aws:iam::"
              - !Ref "AWS::AccountId"
              - ":role/aws-opsworks-service-role"
      UseCustomCookbooks: true
      VpcId:
        Fn::ImportValue: !Ref StackVPC

  OpsWorksRedisLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      AutoAssignElasticIps: false
      AutoAssignPublicIps: true
      CustomRecipes:
        Shutdown:
          - "datashades::redis-shutdown"
        Setup:
          - "datashades::redis-setup"
        Configure:
          - "datashades::redis-configure"
        Deploy:
          - "datashades::redis-deploy"
      CustomSecurityGroupIds:
        - Fn::ImportValue: !Ref AdminSG
        - Fn::ImportValue: !Ref DatabaseSG
      EnableAutoHealing: true
      InstallUpdatesOnBoot: true
      Name: !Sub "${ApplicationName}-REDIS"
      Shortname: !Sub "${ApplicationId}-redis"
      StackId: !Ref OpsWorksStack
      Type: custom

  OpsWorksSolrLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      CustomRecipes:
        Setup:
          - "datashades::solr-setup"
        Deploy:
          - "datashades::solr-deploy"
        Configure:
          - "datashades::solr-configure"
        Shutdown:
          - "datashades::solr-shutdown"
      AutoAssignElasticIps: false
      AutoAssignPublicIps: true
      CustomSecurityGroupIds:
        - Fn::ImportValue: !Ref AdminSG
        - Fn::ImportValue: !Ref DatabaseSG
      EnableAutoHealing: true
      InstallUpdatesOnBoot: true
      Name: !Sub "${ApplicationName}-Solr"
      Shortname: !Sub "${ApplicationId}-solr"
      StackId: !Ref OpsWorksStack
      Type: custom

  OpsWorksWebLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      AutoAssignElasticIps: false
      AutoAssignPublicIps: true
      CustomRecipes:
        Setup:
          - "datashades::ckanweb-setup"
        Deploy:
          - "datashades::ckanweb-deploy"
        Configure:
          - "datashades::ckanweb-configure"
      CustomSecurityGroupIds:
        - Fn::ImportValue: !Ref AdminSG
        - Fn::ImportValue: !Ref AppSG
      EnableAutoHealing: true
      InstallUpdatesOnBoot: true
      Name: !Sub "${ApplicationName}-Web"
      Shortname: !Sub "${ApplicationId}-web"
      StackId: !Ref OpsWorksStack
      Type: custom

  OpwxAppCKAN:
    Type: AWS::OpsWorks::App
    Properties:
      Domains:
        - !Sub "${ApplicationId}.${StackTLD}"
      AppSource:
        Type: archive
        Url: !Ref CKANSource
      Description: "CKAN 2.7"
      EnableSsl: false
      Name: !Sub "${ApplicationName}-${Environment}"
      Shortname: !Sub "${ApplicationId}-${Environment}"
      StackId: !Ref OpsWorksStack
      Type: other

  OpwxAppSolr:
    Type: AWS::OpsWorks::App
    Properties:
      AppSource:
        Type: archive
        Url: !Ref SolrSource
      Description: "Apache Solr 5.5.5"
      EnableSsl: false
      Name: !Sub "${ApplicationName}-${Environment}-solr-5.5"
      Shortname: !Sub "${ApplicationId}-${Environment}-solr-5.5"
      StackId: !Ref OpsWorksStack
      Type: other

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: CreateHostedZone
    Properties:
      HostedZoneConfig:
        Comment: TLD for OpsWorks Stack
      Name: !Ref StackTLD

  CKANExtensions:
    DependsOn:
      - OpsWorksStack
    Type: AWS::CloudFormation::Stack
    Condition: ProvisionExtensions
    Properties:
      TemplateURL: !Ref ExtensionsTemplate
      Parameters:
        OpsWorksStack: !Ref OpsWorksStack

  CKANELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: ProvisionELB
    Properties:
      LoadBalancerName: !Sub "${Environment}-${ApplicationName}ELB"
      HealthCheck:
        Target: "HTTP:80/"
        HealthyThreshold: 2
        UnhealthyThreshold: 6
        Interval: 30
        Timeout: 20
      Listeners:
        -
          InstancePort: 80
          LoadBalancerPort: 80
          Protocol: HTTP
      Scheme: "internet-facing"
      SecurityGroups:
        - Fn::ImportValue: !Ref AdminSG
        - Fn::ImportValue: !Ref AppLBSG
      Subnets:
        - Fn::ImportValue:
            !Sub "${WebSubnets}A"
        - Fn::ImportValue:
            !Sub "${WebSubnets}B"

  ELBAttachment:
    DependsOn:
      - OpsWorksStack
      - CKANELB
    Condition: ProvisionELB
    Type: AWS::OpsWorks::ElasticLoadBalancerAttachment
    Properties:
      ElasticLoadBalancerName: !Ref CKANELB
      LayerId: !Ref OpsWorksWebLayer

  WebELBCNAME:
    Condition: ProvisionELB
    Type: AWS::Route53::RecordSet
    DependsOn: CKANELB
    Properties:
      Type: A
      Name: !Sub "${ApplicationId}.${StackTLD}"
      HostedZoneName: !Sub "${StackTLD}."
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
            - CKANELB
            - CanonicalHostedZoneNameID
        DNSName:
          Fn::GetAtt:
            - CKANELB
            - DNSName

Outputs:
  StackID:
    Value: !Ref OpsWorksStack
    Description: OpsWorks Stack Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksStack"
  RedisLayer:
    Value: !Ref OpsWorksRedisLayer
    Description: Redis Layer Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksRedisLayer"

  SolrLayer:
    Value: !Ref OpsWorksSolrLayer
    Description: SolrCloud Layer Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksSolrLayer"

  WebLayer:
    Value: !Ref OpsWorksWebLayer
    Description: Web Layer Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksWebLayer"

  CKANApp:
    Value: !Ref OpwxAppCKAN
    Description: CKAN Application Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksCKANApplication"

  SolrApp:
    Value: !Ref OpwxAppSolr
    Description: SolrCloud Application Id
    Export:
      Name: !Sub "${Environment}${ApplicationName}OpsWorksSolrApplication"

