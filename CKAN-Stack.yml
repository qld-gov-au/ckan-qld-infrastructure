---
- name: Cloudformation Playbook
  hosts: local
  connection: local

  pre_tasks:
    - name: get basic_facts
      set_fact:
        basic_fact={{ item }}
#        CKANSource={{ item.CKANSource }}
      when: item.Environment == Environment
      with_items: "{{ basic_facts }}"

    - name: set facts to environment from basic_fact
      set_fact: "{{ item.key }}={{ item.value }}"
      with_dict: "{{ basic_fact }}"
      when: basic_fact is defined

    - set_fact:
        acm_stack_name: "{{ service_name }}-{{ Environment }}-acm"

    - name: Describe acm cert cloudformation stack in default region
      cloudformation_info:
        region: "{{ region }}"
        stack_name: "{{ acm_stack_name }}"
        stack_resources: true
      register: acm

    - set_fact:
        ACMCertificateARNForDefaultRegion: "{{ acm['cloudformation'][acm_stack_name].stack_outputs.AcmCert }}"

    # 'list-aliases' doesn't offer server-side --filters so fall back to client-side --query
    - name: Retrieve ARN for SSM encryption key
      shell: |
        KEY_ID=$(aws kms list-aliases --region "{{ region }}" --query "Aliases[?AliasName=='alias/aws/ssm'].TargetKeyId" --output text | head -1)
        if [ "$KEY_ID" != "" ]; then
          aws kms describe-key --region "{{ region }}" --key-id "$KEY_ID" --query "KeyMetadata.Arn" --output text
        fi
      register: ssmKeyFacts
    - set_fact:
        SSMKey: "{{ ssmKeyFacts.stdout }}"

    - name: Generate Lambda file hash
      shell: >
        md5sum files/instanceSetupLambda.js | awk '{print substr($1, 1, 20)}'
      register: hash_output
    - set_fact:
        instance_setup_source_hash: "{{ hash_output.stdout_lines[0] }}"

    - include_vars: vars/CKAN-Stack.var.yml
  roles:
    - ansible_cloudformation

  tasks:

    - name: Get stack params
      set_fact:
        stack_name: "{{ item.name }}"
      when: item.template_parameters.Environment == Environment
      with_items: "{{ cloudformation_stacks }}"

    - name: Get current stack facts
      cloudformation_info:
        region: "{{ region }}"
        stack_name: "{{ stack_name }}"
        stack_resources: true
      register: opsworks_facts
