---
- name: Configure VPC peering to Ops account
  hosts: local
  connection: local
  vars_files:
    - vars/vpc.yml
  tasks:
    - name: identify stack
      set_fact:
        CFStack: "{{ item }}"
        stack_name: "{{ item.name }}"
        ApplicationName: "{{ item.template_parameters.ApplicationName }}"
      when: item.template_parameters.Environment == Environment
      with_items: "{{ cloudformation_stacks }}"

    - name: Get current web frontend stack facts
      cloudformation_facts:
        region: "{{ region }}"
        stack_name: "{{ stack_name }}"
        stack_resources: true
      register: vpc_facts
      ignore_errors: yes

    - name: Get and set ansible fact
      set_fact:
        VPCId: "{{ vpc_facts.ansible_facts.cloudformation[stack_name].stack_outputs.VPCId }}"
      when: vpc_facts.ansible_facts is defined

    - name: get vpc peering info
      ec2_vpc_peer_describe:
        vpc_id: "{{ VPCId }}"
        peer_vpc_id: "{{ opsVpcID }}"
        region: "{{ region }}"
      when: VPCId is defined
      register: vpcPeeringDescribed

    - name: configure vpc peering
      set_fact:
        VPCPeeringID: "{{ vpcPeeringDescribed.vpc_peer_connection.VpcPeeringConnectionId }}"
        VPCPeeringEnabled: "true "
      when: vpcPeeringDescribed is defined and vpcPeeringDescribed.vpc_peer_connection is defined

    - include_vars: vars/vpc.yml

    #get VPC ID from created VPC Stack
    - name: Set variable (facts) dependencies
      set_fact:
        VpcId: "{{ vpc_facts.ansible_facts.cloudformation[stack_name].stack_outputs.VPCId }}"

    # Setup VPC Peering
    - name: Create cross account VPC peering Connection
      ec2_vpc_peer:
        region: "{{ region }}"
        vpc_id: "{{ VpcId }}"
        peer_vpc_id: "{{ opsVpcID }}"
        peer_owner_id: "{{ opsAccount }}"
        state: present
        tags:
          Name: "{{ ApplicationName }} {{ Environment }} {{ VpcId }} to Ops {{ opsVpcID }}"
          Environment: "{{ Environment }}"
          Service: "{{ ApplicationName }}"
      register: vpc_peer

    - name: Get VPC Peering STS Role Key
      sts_assume_role:
        region: "{{ region }}"
        role_arn: "arn:aws:iam::{{ opsAccount }}:role/{{ opsRole }}"
        role_session_name: "bamboo-vpc-gi"
      register: assumed_role

    - name: Accept a cross account VPC peering connection request
      ec2_vpc_peer:
        region: "{{ region }}"
        peering_id: "{{ vpc_peer.peering_id }}"
        aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
        aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
        security_token: "{{ assumed_role.sts_creds.session_token }}"
        state: accept
        tags:
          Name: "{{ ApplicationName }} {{ Environment }} {{ VpcId }} to Ops {{ opsVpcID }}"
          Environment: "{{ Environment }}"
          Service: "{{ ApplicationName }}"
