---

# The individual stacks effectively inherit and override the common stack.
#
# - For simple values, we first check the individual stack, then use the
# 'default' filter to get the common value if not provided.
# - For dictionary values, we first get the common dict, then use the
# 'combine' filter to override with values from the individual stack.
#
# The net effect is that the common and individual stacks have the same
# structure, but any values in the individual stacks take priority.

- name: Compile Jinja2 template if required
  template:
    src: "{{ item.template_jinja }}"
    dest: "{{ item.template }}"
  when: item.template_parameters is defined and item.template_parameters.Environment == Environment and item.template_jinja is defined
  with_items: "{{ cloudformation_stacks }}"

##TODO do cfn check on template

- name: Run CloudFormation stack
  cloudformation:
    stack_name: "{{ item.name | default(common_stack.name) }}"
    # 'profile' is optional so we default to empty string, this is to change aws keys
    profile: "{{ item.profile | default(common_stack.profile | default('')) }}"
    state: "{{ item.state | default(common_stack.state) }}"
    region: "{{ item.region | default(common_stack.region) }}"
    disable_rollback: "{{ item.disable_rollback | default(common_stack.disable_rollback) }}"
    template: "{{ item.template | default(common_stack.template) }}"
    template_parameters: "{{ common_stack.template_parameters | combine(item.template_parameters | default({})) }}"
    tags: "{{ common_stack.tags | combine(item.tags | default({})) }}"
  when: item.template_parameters is undefined or item.template_parameters.Environment == Environment
  with_items: "{{ cloudformation_stacks }}"
